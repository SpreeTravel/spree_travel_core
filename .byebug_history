c
Spree::Pax.new(line_item: line_item)
Spree::Pax
Spree::Pax.new
Pax.new
line_item.paxes
line_item.paxes.new
line_item.paxes
line_item
count
c
line_item.context_id
line_item
line_item.context
line_item.context.nil?
line_item
c
count
n
c
line_items
c
line_items
c
n
s
c
line_items
c
n
s
c
n
c
Spree::Api::V1::LineItemsController.line_item_options
c
Spree::Api::V1::LineItemsController.line_item_options
Spree::Api::V1::LineItemsController.line_item_options.shift
Spree::Api::V1::LineItemsController.line_item_options.class
Spree::Api::V1::LineItemsController.line_item_options
c
params[:line_item]
line_items_attributes
params.require(:line_item)
params
c
rate
context
c
context
c
context
c
respond_with(@line_item, status: 201, default_template: :show)
@line_item
c
json_response
c
line_item.nil?
n
c
n
line_item
n
options
Spree::PermittedAttributes.line_item_attributes
PermittedAttributes.line_item_attributes
c
context
c
Spree::Dependencies.cart_add_item_service.constantize
c
n
s
n
c
n
s
n
s
klass
s
n
s
n
s
n
s
n
s
n
s
c
n
s
n
s
c
line_item
c
Spree::StockLocation.count
Spree::StockLocation.any?
c
line_item
line_item.variant
line_item.variant.stock_items
c
self.variant.stock_items
c
self.variant.stock_items
c
self.variant.stock_items
self.errors
self.valid?
c
self
errors
n
c
self
c
self
variant
c
rate
c
rate
c
rate
c
rate
c
rate
c
self.rate
variant.product.calculate_price(context, variant, temporal:false)
c
bt
c
up
u
up
self.rate
self
variant.product.calculate_price(context, variant, temporal:false)
c
up
c
c]
hash
variant.product.calculate_price(context, variant, temporal:false)
hash
 hash[:price]
 hash[:price].match(/(\d.+)/)[1].gsub(',','').to_f
c
variant
self
context
self.calculator.name.constantize.new
c
Spree::CalculatorCar.new
self.calculator
self.calculator.name.constantize.new
Spree::ProductType.last.calculator
Spree::ProductType.last.calcullator
Spree::ProductType.last
self.calculator.name.constantize.new
self.calculator.name.constantize
self.calculator.new
self.calculator.name
self.calculator
self
c
rate_option_values.first.respond_to?(:price)
rate_option_values.first.respond_to(:price)
rate_option_values
s
option_type
n
s
c
context_or_rate_option_value
n
c
context_or_rate_option_value.price
context_or_rate_option_value.price.format
context_or_rate_option_value.price
context_or_rate_option_value.save
context_or_rate_option_value
n
value
n
context_or_rate_option_value
n
rate_option_values
rate_option_values.first.option_value.option_type
rate_option_values.first.option_value
c
rate_option_values.first.option_value.option_type
rate_option_values.first.option_value
rate_option_values
s
n
s
c
context_or_rate_option_value
n
c
      rate_option_values.includes(option_value: :option_type).find { |rov| rov.option_value&.option_type_id == option_type.id}
s
n
s
c
option_type.id
self.rate_option_values.first.option_value.option_type_id
self.rate_option_values.first.option_value
self.rate_option_values.option_value
self.rate_option_values
self
find_existing_option_value(option_type)
option_type
n
s
find_option_value(option_type)
c
option_type
find_option_value(option_type)
context_or_rate_option_value
n
rate_option_values.first.option_value.option_type_id == option_type.id
rate_option_values.first.option_value.option_type_id
option_type
rate_option_values.first.option_value.option_type
rate_option_values.first.option_value
option_type
rate_option_values.first
rate_option_values
s
n
option_type
s
c
context_or_rate_option_value
option_type
n
c
bt
down
up
attr
c
e
n
attributes
json_response
attributes
